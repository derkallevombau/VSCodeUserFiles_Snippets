{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	// Since this is a global snippet, VS Code chooses the comment characters according
	// to the language (if it supports block comments).
	"Inline comment":
	{
		"prefix": "commentInline",
		"description":
		[
			"A single-line block comment.",
			"Especially useful for end-of-line comments in XML,",
			"but it could also be used to comment on a certain param in a C/C++ function declaration."
		],
		"body":
		[
			"$BLOCK_COMMENT_START $0 $BLOCK_COMMENT_END"
		]
	},

	// See "Prompt user to press any key (escaped)" in jsonc.json for a version for usage within a shell Task.
	"Prompt user to press any key":
	{
		"prefix": "prompt_pressAnyKey",
		"description": "Wait until any key is pressed. Can be used to keep a terminal window open after the process started via ‘gnome-terminal -- <command>’ has exited.",
		"body":
		[
			"echo -en \"\\n\\e[1m\\e[97mPress any key to close the window.\"; read -n 1"
		]
	},
}
