{
	// Place your snippets for jsonc here. Each snippet is defined under a snippet name and has a prefix, body and
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	// Keybinding snippets

	"Keybinding to run a task":
	{
		"prefix": "keybindRunTask",
		"body":
		[
			"{",
			"\t\"key\": \"$1\",",
			"\t\"command\": \"workbench.action.tasks.runTask\",",
			"\t\"args\": \"${2:taskName}\"",
			"},$0"
		]
	},

	// Project Task snippets

	"Empty object for project Tasks":
	{
		"prefix": "projTasksObj",
		"body":
		[
			"\"tasks\":",
			"{",
			"\t\"version\": \"2.0.0\",",
			"\t\"tasks\":",
			"\t[",
			"\t\t$0",
			"\t]",
			"}"
		]
	},

	"Project Tasks to diff and update a file":
	{
		"prefix": "projTasksDiffAndUpdate",
		"description": "Project Tasks to diff a certain file of the project against its actually used counterpart and update it in both directions.",
		"body":
		[
			"{",
			"\t\"label\": \"${1:fileName}${2:additionalInfo}: Diff ${3:counterpartDesc} ${1:fileName} and this ${1:fileName}\",",
			"\t\"type\": \"shell\",",
			"\t\"command\": \"diff --color=always ${4:counterpartDir}/${1:fileName} ${5:workspaceDir}/${1:fileName}\",",
			"\t\"problemMatcher\": []",
			"},",
			"{",
			"\t\"label\": \"${1:fileName}${2:additionalInfo}: Copy ${3:counterpartDesc} ${1:fileName} to this ${1:fileName}\",",
			"\t\"type\": \"shell\",",
			"\t\"command\": \"cp -a ${4:counterpartDir}/${1:fileName} ${5:workspaceDir}\",",
			"\t\"problemMatcher\": []",
			"},",
			"{",
			"\t\"label\": \"${1:fileName}${2:additionalInfo}: Copy this ${1:fileName} to ${3:counterpartDesc} ${1:fileName}\",",
			"\t\"type\": \"shell\",",
			"\t\"command\": \"cp -a ${5:workspaceDir}/${1:fileName} ${4:counterpartDir}\",",
			"\t\"problemMatcher\": []",
			"},",
		]
	},

	// Snippets for shell Tasks/Snippets

	// Processing of backslashes
	//
	// Sequence	Result							Deduction (if not obvious; using single quotes to highlight the substitutions)
	// \n		decoded newline
	// \\n		\n
	// \\\n		\ followed by decoded newline	'\\'\n			-> '\'\n
	// \\\\n	\n								'\\''\\n'		-> '\''\n'		(no idea why this doesn't give \\n.)
	// \\\\\n	\ followed by decoded newline	'\\''\\'\n		-> '\''\'\n		(no idea why this doesn't give \\ and decoded newline.)
	// \\\\\\n	\\n								'\\''\\''\\n'	-> '\''\''\n'	(no idea why this doesn't give \\\n.)
	//
	// \"		"
	// \\"		Unexpected end of string
	// \\\"		\"

	"Prompt user for choice (Yn) (Inline)":
	{
		"prefix": "prompt_choice_inline_Yn",
		"body":
		[
			"echo -en \"\\e[1m\\e[97m${1:promptText}\\e[0m \\e[97m[Y/n] \\e[1m\"; command -v tput >/dev/null && haveTput=1; ((haveTput)) && tput sc; while true; do read -n 1 ans; case \\$ans in '') echo -en \"\\e[0m\" ;;& [yYnN]) echo -e \"\\e[0m\" ;;& [yY]|'') ${2:commandsY}; break ;; [nN]) ${3:commandsN}; break ;; *) ((haveTput)) && tput rc && tput el ;; esac; done"
		]
	},
	"Prompt user for choice (yN) (Inline)":
	{
		"prefix": "prompt_choice_inline_yN",
		"body":
		[
			"echo -en \"\\e[1m\\e[97m${1:promptText}\\e[0m \\e[97m[y/N] \\e[1m\"; command -v tput >/dev/null && haveTput=1; ((haveTput)) && tput sc; while true; do read -n 1 ans; case \\$ans in '') echo -en \"\\e[0m\" ;;& [yYnN]) echo -e \"\\e[0m\" ;;& [yY]) ${2:commandsY}; break ;; [nN]|'') ${3:commandsN}; break ;; *) ((haveTput)) && tput rc && tput el ;; esac; done"
		]
	},
	"Prompt user to press any key (escaped)":
	{
		"prefix": "prompt_pressAnyKey_escaped",
		"description":
		[
			"Wait until any key is pressed. Can be used to keep a terminal window open after the process started via ‘gnome-terminal -- <command>’ has exited.",
			"This escaped version is for usage in shell Tasks and Snippets."
		],
		"body":
		[
			"echo -en \\\"\\\\\\n\\\\\\e[1m\\\\\\e[97mPress any key to close the window.\\\"; read -n 1"
		]
	},
}
