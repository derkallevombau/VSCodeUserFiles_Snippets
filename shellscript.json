{
	// Place your snippets for shellscript here. Each snippet is defined under a snippet name and has a prefix, body and
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	"Run as root":
	{
		"prefix": "runAsRoot",
		"description": "Runs a script as root if executed by non-root user.",
		"body":
		[
			"# If not run by root, run script as root.",
			"# Options for sudo (choose what is appropriate for this script):",
			"# -i: Short for --login. /root/.profile will be sourced, but /root/.bashrc",
			"#     will exit immediately.",
			"#     Thus, script path variables and \\$PATH containing kalle's scripts' bin dir",
			"#     exported within /root/.profile will be available to this script.",
			"# -E: The environment of the calling user will be preserved; nothing will be sourced.",
			"#     If this is kalle, you will have the script path variables available to this",
			"#     script, but merely root's default \\$PATH.",
			"# If no option is provided, you will merely have root's default \\$PATH and no",
			"# script path variables available to this script.",
			"#",
			"# If this script exports variables before this boilerplate (e. g. when using the",
			"# run-in-screen boilerplate) that shall be available to this script after it has",
			"# been executed by root, you must use -E.",
			"# If you additionally need -i, you must replace ‘sudo [-i|-E]’ below with",
			"# ‘sudo -E bash -l’ because -i and -E are mutually exclusive.",
			"# But by using ‘bash -l’, you get the same effect as with ‘sudo -i’",
			"# (-l is for bash what -i is for sudo).",
			"# If you also use the run-in-screen boilerplate, place it before this one.",
			"((\\$(id -u))) && exec sudo${1| -i , -E , , -E bash -l |}\"$(cd \\$(dirname \\$0); pwd)/$(basename \\$0)\" \"$@\""
		]
	},

	"Get absolute path of script":
	{
		"prefix": "scriptAbsPath",
		"description": "Get absolute path of script or link to it no matter how it has been invoked.",
		"body": ["$(cd \\$(dirname  \"\\$0\"); pwd)/\\$(basename \"\\$0\")"]
	},

	"Safely use getopts in a function":
	{
		"prefix": "getoptsInFunction",
		"body":
		[
			"if ((OPTIND != 1)); then",
			"\techo -n \"Error: \\$(basename \\$0): \"",
			"\techo -n \"In function \\${BASH_FUNCNAME[0]}, line \\${BASH_LINENO[0]}: \"",
			"\techo \"OPTIND == \\$OPTIND > 1.\"",
			"\techo 'Your function was about to call getopts,'",
			"\techo -e \"but a previous option processing has not finished yet. Exiting\\n\"",
			"\tlocal callTrace i=0; while callTrace+=\\$(caller \\$i); do echo >/dev/null; done",
			"\t[[ \\$callTrace ]] && echo -e \"\\n----- Call Trace -----\\n\\$callTrace\\n\"",
			"\texit 1",
			"fi\n",
			"local opt\n",
			"while getopts '$1' opt; do",
			"\tcase \\$opt in",
			"\t\t$2)",
			"\t\t\t$0",
			"\t\t\t;;",
			"\tesac",
			"done\n",
			"# Remove option args from positional parameters.",
			"# N.B.: After reading all option args, \\$OPTIND is the index of the first",
			"# non-option arg, thus \\$((OPTIND - 1)) is the number of option args.",
			"shift \\$((OPTIND - 1))\n",
			"# Reset \\$OPTIND to indicate we have finished using getopts.",
			"OPTIND=1"
		]
	},

	"Use getopts in a standalone script":
	{
		"prefix": "getoptsInStandaloneScript",
		"body":
		[
			"local opt\n",
			"while getopts '$1' opt; do",
			"\tcase \\$opt in",
			"\t\t$2)",
			"\t\t\t$0",
			"\t\t\t;;",
			"\tesac",
			"done\n",
			"# Remove option args from positional parameters.",
			"# N.B.: After reading all option args, \\$OPTIND is the index of the first",
			"# non-option arg, thus \\$((OPTIND - 1)) is the number of option args.",
			"shift \\$((OPTIND - 1))\n"
		]
	},

	// See "Prompt user for choice (Yn)" in jsonc.json for a version for usage within a shell Task.
	"Prompt user for choice (Yn)":
	{
		"prefix": "prompt_choice_Yn",
		"body":
		[
			"echo -en \"\\e[1m\\e[97m${1:promptText}\\e[0m \\e[97m[Y/n] \\e[1m\"\n",
			"command -v tput >/dev/null && haveTput=1",
			"((haveTput)) && tput sc\n",
			"while true; do",
			"read -n 1 ans\n",
			"\tcase \\$ans in",
			"\t\t'')",
			"\t\t\techo -en \"\\e[0m\"",
			"\t\t\t;;&",
			"\t\t[yYnN])",
			"\t\t\techo -e \"\\e[0m\"",
			"\t\t\t;;&",
			"\t\t[yY]|'')",
			"\t\t\t${2:commandsY}",
			"",
			"\t\t\tbreak",
			"\t\t\t;;",
			"\t\t[nN])",
			"\t\t\t${3:commandsN}",
			"",
			"\t\t\tbreak",
			"\t\t\t;;",
			"\t\t*)",
			"\t\t\t((haveTput)) && tput rc && tput el # Restore cursor pos and clear to end of line (see man terminfo).",
			"\t\t\t;;",
			"\tesac",
			"done",
		]
	},

	// See "Prompt user for choice (yN)" in jsonc.json for a version for usage within a shell Task.
	"Prompt user for choice (yN)":
	{
		"prefix": "prompt_choice_yN",
		"body":
		[
			"echo -en \"\\e[1m\\e[97m${1:promptText}\\e[0m \\e[97m[y/N] \\e[1m\"\n",
			"command -v tput >/dev/null && haveTput=1",
			"((haveTput)) && tput sc\n",
			"while true; do",
			"read -n 1 ans\n",
			"\tcase \\$ans in",
			"\t\t'')",
			"\t\t\techo -en \"\\e[0m\"",
			"\t\t\t;;&",
			"\t\t[yYnN])",
			"\t\t\techo -e \"\\e[0m\"",
			"\t\t\t;;&",
			"\t\t[yY])",
			"\t\t\t${2:commandsY}",
			"",
			"\t\t\tbreak",
			"\t\t\t;;",
			"\t\t[nN]|'')",
			"\t\t\t${3:commandsN}",
			"",
			"\t\t\tbreak",
			"\t\t\t;;",
			"\t\t*)",
			"\t\t\t((haveTput)) && tput rc && tput el # Restore cursor pos and clear to end of line (see man terminfo).",
			"\t\t\t;;",
			"\tesac",
			"done",
		]
	},

	"Run command with nullglob (single line)":
	{
		"prefix": "runWithNullglobSingleLine",
		"description":
		[
			"Runs the specified command with nullglob.",
			"Leaving nullglob on for the rest of a script can cause strange side effects (but I don't remember them)."
		],
		"body":
		[
			"shopt -s nullglob; ${1:command}; shopt -u nullglob",
		]
	},
	"Run command with nullglob":
	{
		"prefix": "runWithNullglob",
		"description":
		[
			"Runs the specified command with nullglob.",
			"Leaving nullglob on for the rest of a script can cause strange side effects (but I don't remember them)."
		],
		"body":
		[
			"shopt -s nullglob",
			"${1:command}",
			"shopt -u nullglob",
		]
	},
}
