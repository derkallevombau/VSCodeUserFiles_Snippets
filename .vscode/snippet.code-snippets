{
	// Place your snippets workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	"New snippet":
	{
		"prefix": "snippet",
		"body":
		[
			"\"${1:snippetName}\":",
			"{",
			"\t\"prefix\": \"$2\",",
			"\t\"description\": \"$3\",",
			"\t\"body\":",
			"\t[",
			"\t\t$0",
			"\t]",
			"},"
		]
	},

	"Snippet body line":
	{
		"prefix": "snippetBodyLine",
		"description": "New snippet body line with indentation level 0",
		"body":
		[
			"\"$1\",$0"
		]
	},

	"Snippet body line indented 1":
	{
		"prefix": "snippetBodyLineIndented1",
		"description": "New snippet body line with indentation level 1",
		"body":
		[
			// Escape the \t to have it inserted literally.
			"\"\\t$1\",$0"
		]
	},

	"Snippet body line indented 2":
	{
		"prefix": "snippetBodyLineIndented2",
		"description": "New snippet body line with indentation level 2",
		"body":
		[
			"\"\\t\\t$1\",$0"
		]
	},

	"Snippet body line indented 3":
	{
		"prefix": "snippetBodyLineIndented3",
		"description": "New snippet body line with indentation level 3",
		"body":
		[
			"\"\\t\\t\\t$1\",$0"
		]
	},

	"Snippet body line quoted string":
	{
		"prefix": "snippetBodyLineQuotedStr",
		"description": "A pair of escaped double quotes to be used in a snippet body line",
		"body":
		[
			// N.B.: To have \"\" inserted, we normally would escape each backslash.
			//       But using \\"\\" here would lead to having unescaped double quotes
			//       within between the outer ones.
			//       The solution is to add a third backslash, although this should give
			//       us \\"\\"; however, VS Code seems to handle this correctly.
			"\\\"$0\\\""
		]
	},
}
